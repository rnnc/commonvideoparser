"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _axios=_interopRequireDefault(require("axios")),_bluebird=_interopRequireDefault(require("bluebird")),_moment=_interopRequireDefault(require("moment")),_config=require("./config"),_helper=require("./helper"),_constants=require("./constants");exports.__esModule=!0,exports.default=void 0;const errBuild=(a,b)=>(0,_helper.errorBuild)("Google Drive",a,b);function buildRequest(a){const b=_constants.GOOGLEDRIVE_REGEX.exec(a);if(b)return`https://www.googleapis.com/drive/v3/files/${b[1]}`+`?fields=createdTime%2Cid%2Cname%2Csize%2CthumbnailLink%2CvideoMediaMetadata%2CwebViewLink`+`&key=${(0,_config.getGoogleApiKey)()}`;throw"Failed to parse link"}function parseVideoData(a){const{name:b,webViewLink:c,size:d,createdTime:e,videoMediaMetadata:f,thumbnailLink:g}=a;try{return{title:b,duration:_moment.default.duration(+f.durationMillis,"ms").toISOString(),link:c.match(/(.*)(\/view)/i)[1],size:`${(d/1e6).toFixed(2)} MB`,createdTime:e,dimensions:`${f.width} x ${f.height}`,thumbnail:g}}catch(a){throw a}}async function videoInfoData(a){try{const b=buildRequest(a),c=(await _axios.default.get(b)).data;return parseVideoData(c)}catch(a){throw a}}function multiVideoInfoData(a){const b=a.map(a=>new _bluebird.default(async(b,c)=>{try{const c=buildRequest(a),d=(await _axios.default.get(c)).data;b(parseVideoData(d))}catch(b){c({error:b,link:a})}}));return _bluebird.default.all(b.map(a=>a.reflect())).then(a=>[a.filter(a=>a.isFulfilled()).map(a=>a.value()),a.filter(a=>a.isRejected()).map(a=>a.reason())]).then(a=>[].concat.apply([],a))}var _default={setGoogleApiKey:_config.setGoogleApiKey,async videoData(...a){if(!(0,_config.getGoogleApiKey)())throw errBuild("videoData",`Google Api Key not set, use 'setGoogleApiKey'`);if(0==a.length||(0,_helper.arrayCheck)(a[0])&&0==a[0].length)throw errBuild("videoData",`Empty`);try{if((0,_helper.stringCheck)(a[0]))return 1==a.length?videoInfoData(a[0]):multiVideoInfoData(a);if((0,_helper.arrayCheck)(a[0])&&(0,_helper.stringCheck)(a[0][0]))return 1==a[0].length?videoInfoData(a[0][0]):multiVideoInfoData(a[0])}catch(a){throw errBuild("videoData",a)}throw errBuild("videoData",`Invalid param type, String(s) expected`)}};exports.default=_default;