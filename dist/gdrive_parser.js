'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _requestPromise=require('request-promise'),_requestPromise2=_interopRequireDefault(_requestPromise),_moment=require('moment'),_moment2=_interopRequireDefault(_moment),_config=require('./config'),_helper=require('./helper');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const errBuild=(a,b)=>(0,_helper.errorBuild)('Google Drive',a,b),url_regex=(0,_config.parsingRegex)('gdrive');function buildRequest(a){const b=url_regex.exec(a);if(b)return`https://www.googleapis.com/drive/v3/files/${b[1]}`+`?fields=createdTime%2Cid%2Cname%2Csize%2CthumbnailLink%2CvideoMediaMetadata%2CwebViewLink`+`&key=`+(0,_config.getGoogleApiKey)();throw errBuild(null,'Invalid link (Error in Parsing)')}function parseVideoData(a){const{name:b,webViewLink:c,size:d,createdTime:e,videoMediaMetadata:f,thumbnailLink:g}=JSON.parse(a);try{return{title:b,link:c.match(/(.*)(\/view)/i)[1],size:`${(d/1e6).toFixed(2)} MB`,duration:_moment2.default.duration(+f.durationMillis,'ms').toISOString(),createdTime:e,thumbnail:g,dimensions:`${f.width} x ${f.height}`}}catch(a){throw a}}exports.default={setGoogleApiKey:_config.setGoogleApiKey,async videoData(a){if(!(0,_config.getGoogleApiKey)())throw`Google Api Key not set, use 'setGoogleApiKey'`;if(Array.isArray(a)){let b=[];for(const c of a)try{const a=buildRequest(c);b.push(parseVideoData((await _requestPromise2.default.get(a))))}catch(a){b.push({error:a,video:c})}return b}if((0,_helper.stringCheck)(a)){const b=buildRequest(a);return parseVideoData((await _requestPromise2.default.get(b)))}throw errBuild('videoData',`Invalid param type, String or String[] expected; got ${typeof a} instead`)}};