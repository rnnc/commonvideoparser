'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _requestPromise=require('request-promise'),_requestPromise2=_interopRequireDefault(_requestPromise),_moment=require('moment'),_moment2=_interopRequireDefault(_moment),_config=require('./config'),_helper=require('./helper');function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}const errBuild=(a,b)=>errBuild('Dailymotion',a,b),url_regex=(0,_config.parsingRegex)('dailymotion');function buildRequest(a){const b=url_regex.exec(a);if(b)return`https://api.dailymotion.com/video/${b[2]}`+`?fields=channel,created_time,duration,height,thumbnail_url,title,url,width,`;throw errBuild(null,'Invalid Link (Error in Parsing)')}function parseVideoData(a){const{title:b,url:c,duration:d,created_time:e,width:f,height:g,thumbnail_url:h}=a;return{title:b,link:c,duration:_moment2.default.duration(d,'s').toISOString(),createdTime:_moment2.default.unix(e).toISOString(),dimensions:f+' x '+g,poster:h}}exports.default={async videoData(a){if(Array.isArray(a)){let b=[];for(const c of a)try{const a=buildRequest(c),d=JSON.parse((await _requestPromise2.default.get(a)));b.push(parseVideoData(d))}catch(a){b.push({error:a,video:c})}return b}if((0,_helper.stringCheck)(a)){const b=buildRequest(a);return parseVideoData(JSON.parse((await _requestPromise2.default.get(b))))}throw errBuild('videoData',`Invalid param type, String or String[] expected; got ${typeof a} instead`)}};