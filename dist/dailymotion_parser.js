"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _requestPromise=_interopRequireDefault(require("request-promise")),_moment=_interopRequireDefault(require("moment")),_config=require("./config"),_helper=require("./helper");exports.__esModule=!0,exports.default=void 0;const errBuild=(a,b)=>errBuild("Dailymotion",a,b),url_regex=(0,_config.parsingRegex)("dailymotion");function buildRequest(a){const b=url_regex.exec(a);if(b)return`https://api.dailymotion.com/video/${b[2]}`+`?fields=channel,created_time,duration,height,thumbnail_url,title,url,width,`;throw errBuild(null,"Invalid Link (Error in Parsing)")}function parseVideoData(a){const{title:b,url:c,duration:d,created_time:e,width:f,height:g,thumbnail_url:h}=a;return{title:b,duration:_moment.default.duration(d,"s").toISOString(),link:c,createdTime:_moment.default.unix(e).toISOString(),dimensions:f+" x "+g,thumbnail:h}}var _default={async videoData(a){if(Array.isArray(a)){let b=[];for(const c of a)try{const a=buildRequest(c),d=JSON.parse((await _requestPromise.default.get(a)));b.push(parseVideoData(d))}catch(a){b.push({error:a,video:c})}return b}if((0,_helper.stringCheck)(a)){const b=buildRequest(a);return parseVideoData(JSON.parse((await _requestPromise.default.get(b))))}throw errBuild("videoData",`Invalid param type, String or String[] expected; got ${typeof a} instead`)}};exports.default=_default;